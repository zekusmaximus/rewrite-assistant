import React from 'react';
import type { ContinuityIssue } from '../../../../shared/types';

interface ChangeExplanationProps {
  explanation: string;
  issuesAddressed: ContinuityIssue[];
  modelUsed?: string;
  className?: string;
}

const ChangeExplanation: React.FC<ChangeExplanationProps> = ({
  explanation,
  issuesAddressed,
  modelUsed,
  className = ''
}) => {
  const getIssueIcon = (type: ContinuityIssue['type']) => {
    switch(type) {
      case 'pronoun':
        return '👤';
      case 'character':
        return '🎭';
      case 'timeline':
        return '⏰';
      case 'plot':
        return '📖';
      case 'engagement':
        return '✨';
      default:
        return '📝';
    }
  };
  
  const getIssueSeverityColor = (severity: ContinuityIssue['severity']) => {
    switch(severity) {
      case 'must-fix':
        return 'text-red-600 bg-red-50';
      case 'should-fix':
        return 'text-amber-600 bg-amber-50';
      case 'consider':
        return 'text-blue-600 bg-blue-50';
      default:
        return 'text-gray-600 bg-gray-50';
    }
  };
  
  return (
    <div className={`space-y-3 ${className}`}>
      {/* Summary explanation */}
      {explanation && (
        <div className="text-sm text-gray-700">
          {explanation}
        </div>
      )}
      
      {/* Issues addressed */}
      {issuesAddressed.length > 0 && (
        <div>
          <div className="text-xs font-semibold text-gray-600 mb-2">
            Issues Fixed ({issuesAddressed.length}):
          </div>
          <div className="space-y-1">
            {issuesAddressed.map((issue, index) => (
              <div 
                key={index}
                className={`flex items-start gap-2 p-2 rounded text-xs ${
                  getIssueSeverityColor(issue.severity)
                }`}
              >
                <span className="text-base mt-[-2px]">
                  {getIssueIcon(issue.type)}
                </span>
                <div className="flex-1">
                  <div className="font-medium capitalize">
                    {issue.type} Issue
                  </div>
                  <div className="mt-1 opacity-90">
                    {issue.description}
                  </div>
                  {issue.suggestedFix && (
                    <div className="mt-1 italic">
                      Fix: {issue.suggestedFix}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
      
      {/* Model attribution */}
      {modelUsed && (
        <div className="text-xs text-gray-500 flex items-center gap-1">
          <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z"/>
            <path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd"/>
          </svg>
          Generated by {modelUsed}
        </div>
      )}
    </div>
  );
};

export default ChangeExplanation;