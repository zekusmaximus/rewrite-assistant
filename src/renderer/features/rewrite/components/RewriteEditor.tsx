import React, { useState, useEffect, useCallback } from 'react';
import useRewriteStore from '../stores/rewriteStore';
import DiffViewer from './DiffViewer';
import type { Scene } from '../../../../shared/types';

interface RewriteEditorProps {
  scene: Scene;
  onClose?: () => void;
  className?: string;
}

const RewriteEditor: React.FC<RewriteEditorProps> = ({
  scene,
  onClose,
  className = ''
}) => {
  const {
    getLatestRewrite,
    getEditedText,
    getDiff,
    updateEditedText,
    saveEdit,
    applyRewrite,
    rejectRewrite,
    loadRewriteForEdit,
    isEditing
  } = useRewriteStore();
  
  const [isEditMode, setIsEditMode] = useState(false);
  const [localText, setLocalText] = useState('');
  const [viewMode, setViewMode] = useState<'side-by-side' | 'inline'>('side-by-side');
  const [showConfirmDialog, setShowConfirmDialog] = useState<'apply' | 'reject' | null>(null);
  
  const latestRewrite = getLatestRewrite(scene.id);
  const editedText = getEditedText(scene.id);
  const diffSegments = getDiff(scene.id);
  const hasUnsavedChanges = isEditMode && localText !== (editedText || latestRewrite?.rewrittenText);
  
  // Initialize text when entering edit mode
  useEffect(() => {
    if (isEditMode && !isEditing(scene.id)) {
      loadRewriteForEdit(scene.id);
      setLocalText(editedText || latestRewrite?.rewrittenText || '');
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isEditMode, scene.id]);
  
  // Update local text when edited text changes
  useEffect(() => {
    if (editedText && isEditMode) {
      setLocalText(editedText);
    }
  }, [editedText, isEditMode]);
  
  const handleTextChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setLocalText(e.target.value);
    updateEditedText(scene.id, e.target.value);
  }, [scene.id, updateEditedText]);
  
  const handleSaveEdit = useCallback(() => {
    saveEdit(scene.id);
    setIsEditMode(false);
  }, [scene.id, saveEdit]);
  
  const handleCancelEdit = useCallback(() => {
    if (hasUnsavedChanges) {
      const confirmed = window.confirm('You have unsaved changes. Are you sure you want to cancel?');
      if (!confirmed) return;
    }
    setIsEditMode(false);
    setLocalText('');
  }, [hasUnsavedChanges]);
  
  const handleApply = useCallback(() => {
    if (hasUnsavedChanges) {
      saveEdit(scene.id);
    }
    applyRewrite(scene.id);
    setShowConfirmDialog(null);
    onClose?.();
  }, [scene.id, hasUnsavedChanges, saveEdit, applyRewrite, onClose]);
  
  const handleReject = useCallback(() => {
    rejectRewrite(scene.id);
    setShowConfirmDialog(null);
    onClose?.();
  }, [scene.id, rejectRewrite, onClose]);
  
  if (!latestRewrite) {
    return (
      <div className={`p-4 text-center text-gray-500 ${className}`}>
        No rewrite available for this scene
      </div>
    );
  }
  
  const displayText = editedText || latestRewrite.rewrittenText;
  
  return (
    <div className={`flex flex-col h-full ${className}`}>
      {/* Header */}
      <div className="px-4 py-3 bg-gray-50 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-semibold text-gray-900">
              Rewrite Review
            </h3>
            <p className="text-sm text-gray-600 mt-1">
              {latestRewrite.issuesAddressed.length} issues addressed â€¢ 
              {latestRewrite.userEdited ? ' User edited' : ` Generated by ${latestRewrite.modelUsed}`}
            </p>
          </div>
          <div className="flex items-center gap-2">
            {/* View Mode Toggle */}
            <div className="flex bg-white border border-gray-200 rounded-md">
              <button
                onClick={() => setViewMode('side-by-side')}
                className={`px-3 py-1 text-sm ${
                  viewMode === 'side-by-side'
                    ? 'bg-blue-500 text-white'
                    : 'text-gray-700 hover:bg-gray-50'
                } rounded-l-md transition-colors`}
              >
                Side by Side
              </button>
              <button
                onClick={() => setViewMode('inline')}
                className={`px-3 py-1 text-sm ${
                  viewMode === 'inline'
                    ? 'bg-blue-500 text-white'
                    : 'text-gray-700 hover:bg-gray-50'
                } rounded-r-md transition-colors`}
              >
                Inline
              </button>
            </div>
            
            {/* Close button */}
            {onClose && (
              <button
                onClick={onClose}
                className="text-gray-400 hover:text-gray-600"
                aria-label="Close"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            )}
          </div>
        </div>
      </div>
      
      {/* Changes Explanation */}
      {latestRewrite.changesExplanation && (
        <div className="px-4 py-2 bg-blue-50 border-b border-blue-200">
          <p className="text-sm text-blue-800">
            <span className="font-semibold">Changes made:</span> {latestRewrite.changesExplanation}
          </p>
        </div>
      )}
      
      {/* Content Area */}
      <div className="flex-1 overflow-auto p-4">
        {isEditMode ? (
          <div className="h-full">
            <textarea
              value={localText}
              onChange={handleTextChange}
              className="w-full h-full p-3 border border-gray-300 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Edit the rewritten text..."
            />
          </div>
        ) : (
          <DiffViewer
            originalText={scene.text}
            rewrittenText={displayText}
            diffSegments={diffSegments}
            viewMode={viewMode}
          />
        )}
      </div>
      
      {/* Action Bar */}
      <div className="px-4 py-3 bg-gray-50 border-t border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex gap-2">
            {!isEditMode ? (
              <>
                <button
                  onClick={() => setIsEditMode(true)}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  Edit Rewrite
                </button>
                <button
                  onClick={() => setShowConfirmDialog('apply')}
                  className="px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500"
                >
                  Apply Rewrite
                </button>
                <button
                  onClick={() => setShowConfirmDialog('reject')}
                  className="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500"
                >
                  Reject
                </button>
              </>
            ) : (
              <>
                <button
                  onClick={handleSaveEdit}
                  className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  Save Edit
                </button>
                <button
                  onClick={handleCancelEdit}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500"
                >
                  Cancel
                </button>
              </>
            )}
          </div>
          
          {hasUnsavedChanges && (
            <span className="text-sm text-amber-600">
              Unsaved changes
            </span>
          )}
        </div>
      </div>
      
      {/* Confirmation Dialogs */}
      {showConfirmDialog && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl p-6 max-w-md w-full">
            <h3 className="text-lg font-semibold mb-4">
              {showConfirmDialog === 'apply' ? 'Apply Rewrite?' : 'Reject Rewrite?'}
            </h3>
            <p className="text-gray-600 mb-6">
              {showConfirmDialog === 'apply'
                ? 'This will replace the original scene text with the rewritten version. This action can be undone.'
                : 'This will discard the rewritten version and keep the original text.'}
            </p>
            <div className="flex justify-end gap-3">
              <button
                onClick={() => setShowConfirmDialog(null)}
                className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                onClick={showConfirmDialog === 'apply' ? handleApply : handleReject}
                className={`px-4 py-2 text-sm font-medium text-white rounded-md ${
                  showConfirmDialog === 'apply'
                    ? 'bg-green-600 hover:bg-green-700'
                    : 'bg-red-600 hover:bg-red-700'
                }`}
              >
                {showConfirmDialog === 'apply' ? 'Apply' : 'Reject'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default RewriteEditor;